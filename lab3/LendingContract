
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LendingContract {
    //Lender Address
    address public lender;
    // Mapping to track user balances
    mapping(address => uint256) public balances;

    constructor() {
       lender = msg.sender;
       }
    modifier OnlyLender{
        require(msg.sender==lender, "Only Lender can call this function.");
        _;
    }
    // Deposit function
    function deposit() public payable OnlyLender{
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[lender] += msg.value;
    }

    // Borrow function
    function borrow(address borrower, uint amount) public {
        require(balances[lender] >= amount, "Insufficient balance to borrow");
        balances[lender] -= amount;
        balances[borrower] += amount;
        payable(borrower).transfer(amount);
    }

    // Check user's balance
    function getBalance() public  view returns (uint256) {
        return balances[msg.sender];
    }

}
