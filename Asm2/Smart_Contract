// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract MyNFT is ERC721Enumerable, Ownable {
    using SafeMath for uint256;

    // Base URI for metadata
    string private _baseTokenURI;

    // Mapping to store token URIs
    mapping(uint256 => string) private _tokenURIs;

    constructor() ERC721("NNFT", "TNFT") {}
    //mint NFT
    function mintNFT(address to, string memory tokenURI) external {
        uint256 tokenId = totalSupply() + 1;
        _mint(to, tokenId);
        _setTokenURI(tokenId, tokenURI);
    }

    // Internal function to set the token URI
    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {
        _tokenURIs[tokenId] = tokenURI;
    }

    // Public function to get the token URI
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return _tokenURIs[tokenId];
    }

    // Get a list of token IDs owned by an address
    function tokensOfOwner(address owner) public view returns (uint256[] memory) {
        uint256 balance = balanceOf(owner);
        uint256[] memory tokenIds = new uint256[](balance);

        for (uint256 i = 0; i < balance; i++) {
            tokenIds[i] = tokenOfOwnerByIndex(owner, i);
        }
        return tokenIds;
    }

    // Get a list of token IDs owned by an address (Check whether there are NFTs)
    function balanceGet(address owner) public view returns (uint256) {
        uint256 balance = balanceOf(owner);
        return balance;
    }
    
}
